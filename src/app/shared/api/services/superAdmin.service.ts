/**
 * AI&D SOFI-META API
 * AI&D SOFI Meta Data Services API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { BehaviorSubject, Observable, of, switchMap, tap } from 'rxjs';

import { HTTPValidationError } from '../model/hTTPValidationError';
import { ModelCommonResponse } from '../model/modelCommonResponse';
import { ModelSAUpdateData } from '../model/modelSAUpdateData';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { ModelSAInfraIntegration, ModelSAInfraIntegrationUpdate, ModelSAUXIntegration } from '../model/models';
import { environment } from 'environments/environment';


@Injectable({ providedIn: 'root' })
export class SuperAdminService {

    protected basePath = environment.BASE_API_PATH;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    private _superAdminData: BehaviorSubject<ModelSAInfraIntegration | null> = new BehaviorSubject(
        null
    );

    get superAdminData$(): Observable<ModelSAInfraIntegration> {
        return this._superAdminData.asObservable();
    }

    private _superAdminUXData: BehaviorSubject<ModelSAUXIntegration | null> = new BehaviorSubject(
        null
    );

    get superAdminUXData$(): Observable<ModelSAUXIntegration> {
        return this._superAdminUXData.asObservable();
    }

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Update Data
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDataSuperAdminUpdateDataPost(body: ModelSAInfraIntegrationUpdate, observe?: 'body', reportProgress?: boolean): Observable<ModelCommonResponse>;
    public updateDataSuperAdminUpdateDataPost(body: ModelSAInfraIntegrationUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelCommonResponse>>;
    public updateDataSuperAdminUpdateDataPost(body: ModelSAInfraIntegrationUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelCommonResponse>>;
    public updateDataSuperAdminUpdateDataPost(body: ModelSAInfraIntegrationUpdate, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateDataSuperAdminUpdateDataPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2PasswordBearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ModelCommonResponse>('post', `${this.basePath}/super-admin/update-data`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * User Me
     * 
     * @param dataType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userMeSuperAdminGetDataGet(dataType: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public userMeSuperAdminGetDataGet(dataType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public userMeSuperAdminGetDataGet(dataType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public userMeSuperAdminGetDataGet(dataType: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (dataType === null || dataType === undefined) {
            throw new Error('Required parameter dataType was null or undefined when calling userMeSuperAdminGetDataGet.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (dataType !== undefined && dataType !== null) {
            queryParameters = queryParameters.set('data_type', <any>dataType);
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2PasswordBearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get', `${this.basePath}/super-admin/get-data`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(tap((response) => {
            this._superAdminData.next(response);
        }));
    }

    /**
     * User Me
     * 
     * @param dataType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userMeSuperAdminGetUXDataGet(dataType: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public userMeSuperAdminGetUXDataGet(dataType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public userMeSuperAdminGetUXDataGet(dataType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public userMeSuperAdminGetUXDataGet(dataType: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (dataType === null || dataType === undefined) {
            throw new Error('Required parameter dataType was null or undefined when calling userMeSuperAdminGetDataGet.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (dataType !== undefined && dataType !== null) {
            queryParameters = queryParameters.set('data_type', <any>dataType);
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2PasswordBearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get', `${this.basePath}/super-admin/get-data`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(tap((response) => {
            this._superAdminUXData.next(response);
        }));
    }

}
