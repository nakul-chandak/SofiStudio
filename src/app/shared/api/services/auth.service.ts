/**
 * AI&D SOFI-META API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { inject, Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable, of, switchMap, throwError }                                        from 'rxjs';

import { HTTPValidationError } from '../model/hTTPValidationError';
import { ModelAuthPasswordReset } from '../model/modelAuthPasswordReset';
import { ModelAuthPasswordResetRequest } from '../model/modelAuthPasswordResetRequest';
import { ModelAuthSignup } from '../model/modelAuthSignup';
import { ModelAuthVerifyEmail } from '../model/modelAuthVerifyEmail';
import { ModelCommonResponse } from '../model/modelCommonResponse';
//import { ModelNull } from '../model/modelNull';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { environment } from '../../../../environments/environment';
import { ModelAuthToken } from '../model/modelAuthToken';
import { UserService } from './user.service';
import { user } from 'app/mock-api/common/user/data';

@Injectable({ providedIn: 'root' })
export class AuthService {

    protected basePath = environment.BASE_API_PATH;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    private _authenticated: boolean = false;
    private httpClient = inject(HttpClient);
    private _userService = inject(UserService);

    set accessToken(token: string) {
        localStorage.setItem('accessToken', token);
    }

    get accessToken(): string {
        return localStorage.getItem('accessToken') ?? '';
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Auth Signin
     * 
     * @param grantType 
     * @param username 
     * @param password 
     * @param scope 
     * @param clientId 
     * @param clientSecret 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authSigninAuthSigninPostForm(grantType: string, username: string, password: string, scope: string, clientId: string, clientSecret: string, observe?: 'body', reportProgress?: boolean): Observable<ModelAuthToken>;
    public authSigninAuthSigninPostForm(grantType: string, username: string, password: string, scope: string, clientId: string, clientSecret: string, observe?: ModelAuthToken, reportProgress?: boolean): Observable<HttpResponse<ModelAuthToken>>;
    public authSigninAuthSigninPostForm(grantType: string, username: string, password: string, scope: string, clientId: string, clientSecret: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelAuthToken>>;
    public authSigninAuthSigninPostForm(grantType: string, username: string, password: string, scope: string, clientId: string, clientSecret: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

           if (this._authenticated) {
                    return throwError('User is already logged in.');
                };

        if (grantType === null || grantType === undefined || grantType === "") {
            grantType="password"
        }

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling authSigninAuthSigninPost.');
        }

        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling authSigninAuthSigninPost.');
        }

        if (scope === null || scope === undefined) {
            throw new Error('Required parameter scope was null or undefined when calling authSigninAuthSigninPost.');
        }

        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling authSigninAuthSigninPost.');
        }

        if (clientSecret === null || clientSecret === undefined) {
            throw new Error('Required parameter clientSecret was null or undefined when calling authSigninAuthSigninPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (grantType !== undefined) {
            formParams = formParams.append('grant_type', <any>grantType) as any || formParams;
        }
        if (username !== undefined) {
            formParams = formParams.append('username', <any>username) as any || formParams;
        }
        if (password !== undefined) {
            formParams = formParams.append('password', <any>password) as any || formParams;
        }
        if (scope !== undefined) {
            formParams = formParams.append('scope', <any>scope) as any || formParams;
        }
        if (clientId !== undefined) {
            formParams = formParams.append('client_id', <any>clientId) as any || formParams;
        }
        if (clientSecret !== undefined) {
            formParams = formParams.append('client_secret', <any>clientSecret) as any || formParams;
        }

        return this.httpClient.request<ModelAuthToken>('post',`${this.basePath}/auth/signin`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            })
    .pipe(
        switchMap((response: any) => {
            this.accessToken = response.access_token;
            const user = {
                id: 'cfaad35d-07a3-4447-a6c3-d8c3d54fd5df',
                name: 'Nakul Chandak',
                email: 'nakul.chandak@aianddigital.com',
                avatar: 'images/avatars/brian-hughes.jpg',
                status: 'online',
            };
            this._userService.user = user;

            // Set the authenticated flag to true
                this._authenticated = true;

              

            return of(response);
        }));
    }
    

    /**
     * Auth Signup
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authSignupAuthSignupPost(body: ModelAuthSignup, observe?: 'body', reportProgress?: boolean): Observable<ModelCommonResponse>;
    public authSignupAuthSignupPost(body: ModelAuthSignup, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelCommonResponse>>;
    public authSignupAuthSignupPost(body: ModelAuthSignup, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelCommonResponse>>;
    public authSignupAuthSignupPost(body: ModelAuthSignup, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling authSignupAuthSignupPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ModelCommonResponse>('post',`${this.basePath}/auth/signup`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Password Reset
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public passwordResetAuthPasswordResetPost(body: ModelAuthPasswordReset, observe?: 'body', reportProgress?: boolean): Observable<ModelCommonResponse>;
    public passwordResetAuthPasswordResetPost(body: ModelAuthPasswordReset, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelCommonResponse>>;
    public passwordResetAuthPasswordResetPost(body: ModelAuthPasswordReset, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelCommonResponse>>;
    public passwordResetAuthPasswordResetPost(body: ModelAuthPasswordReset, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling passwordResetAuthPasswordResetPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ModelCommonResponse>('post',`${this.basePath}/auth/password-reset`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Password Reset Request
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public passwordResetRequestAuthPasswordResetRequestPost(body: ModelAuthPasswordResetRequest, observe?: 'body', reportProgress?: boolean): Observable<ModelCommonResponse>;
    public passwordResetRequestAuthPasswordResetRequestPost(body: ModelAuthPasswordResetRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelCommonResponse>>;
    public passwordResetRequestAuthPasswordResetRequestPost(body: ModelAuthPasswordResetRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelCommonResponse>>;
    public passwordResetRequestAuthPasswordResetRequestPost(body: ModelAuthPasswordResetRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling passwordResetRequestAuthPasswordResetRequestPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ModelCommonResponse>('post',`${this.basePath}/auth/password-reset-request`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Verify Email
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public verifyEmailAuthVerifyEmailPost(body: ModelAuthVerifyEmail, observe?: 'body', reportProgress?: boolean): Observable<ModelCommonResponse>;
    public verifyEmailAuthVerifyEmailPost(body: ModelAuthVerifyEmail, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelCommonResponse>>;
    public verifyEmailAuthVerifyEmailPost(body: ModelAuthVerifyEmail, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelCommonResponse>>;
    public verifyEmailAuthVerifyEmailPost(body: ModelAuthVerifyEmail, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling verifyEmailAuthVerifyEmailPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ModelCommonResponse>('post',`${this.basePath}/auth/verify-email`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

     /**
         * Check the authentication status
         */
        check(): Observable<boolean> {
            
            // Check if the user is logged in
            if (this._authenticated) {
                const user = {
                    id: 'cfaad35d-07a3-4447-a6c3-d8c3d54fd5df',
                    name: 'Nakul Chandak',
                    email: 'nakul.chandak@aianddigital.com',
                    avatar: 'images/avatars/brian-hughes.jpg',
                    status: 'online',
                };
                this._userService.user = user;

                return of(true);
            }
    
            // Check the access token availability
            if (this.accessToken) {
                const user = {
                    id: 'cfaad35d-07a3-4447-a6c3-d8c3d54fd5df',
                    name: 'Nakul Chandak',
                    email: 'nakul.chandak@aianddigital.com',
                    avatar: 'images/avatars/brian-hughes.jpg',
                    status: 'online',
                };
                this._userService.user = user;
                
                this._authenticated = true;
                return of(true);
            }
    
            return of(false);
            // Check the access token expire date
            // if (AuthUtils.isTokenExpired(this.accessToken)) {
            //     return of(false);
            // }
    
            // If the access token exists, and it didn't expire, sign in using it
            //return this.signInUsingToken();
        }

        /**
     * Sign out
     */
    signOut(): Observable<any> {
        // Remove the access token from the local storage
        localStorage.removeItem('accessToken');

        // Set the authenticated flag to false
        this._authenticated = false;

        // Return the observable
        return of(true);
    }
}
